P79. 函数的方法
call()和apply()
	- 这两个方法都是函数对象的方法，需要通过函数对象来调用
	- 这两个方法里面没参数的时候和直接调用函数没区别
	- 我们可以在括号里填入一个参数，那么这个参数就是我们函数执行时的this
	- 相当于这两个方法可以改变指针指向的对象
	- 举例：
        var a = {
            name:"张三",
            sayName:function(){
                alert(this.name);
            }
        };
        var b = {name:"李四"};
		a.sayName();	//这个是a对象中的sayName方法，有a调用，this指向的也是a，所以这里打印张三
        a.sayName.call(b);	//可是这里却会打印李四，因为这里虽然方法是a调用的，但是call改变了指向的对象，所以指向了b的name
	
	- call()方法可以将实参在对象之后依次传递
	- apply()方法需要将实参封装到一个数组中，然后统一依次传递
	- 举例：
		function fun(a,b){
            console.log(a);
            console.log(b);
            console.log(this.name);
        }
        var a = {name:"张三"};
        fun.call(a,1,2);	//这里在对象后依次传递即可
        fun.apply(a,[1,2]);	//必须要封装数组
		//这两种方法的结果是一样的
	
	- this的情况
		1. 以函数形式调用时，this永远都是window
		2. 以方法形式调用时，谁调用this就是谁
		3. 以构造函数调用时，this是新创建的对象
		4. 使用call或apply调用时，this指向的是他们括号里的那个对象
		
arguments
	- 这是函数中用于封装实参的对象
	- 这是一个类数组对象，可以通过所以来操作数据，也可以获取长度（但是不是数组对象，用isArray()方法和instanceof来测试会返回false）
	- 在调用函数时，我们传递的实参都会在arguments中保存，即使没定义形参
	- 可以用arguments.length可以获取实参的长度
	- 我们可以用数组的形式来索引实参，如：arguments[0]; //传递的第一个实参
	- 里面有一个属性叫callee
		这个属性对应一个函数对象，就是当前的函数对象，输出此函数对象会出现整个函数的代码
	- 举例：
		function fun(a,b){
            console.log(arguments.length);	//这里输出长度2
			console.log(arguments[0]);	//这里输出张三
            console.log(arguments.callee);		//这里输出整个函数的内容代码
        }
        fun("张三",true);
		
		
P81. Date对象
在JS中用Date对象表示一个时间
	- 如果直接使用Date对象创建一个变量，封装的是当前的时间
		示例：
			var a = new Date();
			alert(a);
			//结果例如：Mon Apr 19 2021 11:21:05 GMT+0800 (中国标准时间)
	- 我们可能有时候还需要创建一个指定的时间对象
		可以在构造函数中传递一个代表时间的字符串
			格式："月份/日/年 时:分:秒"	例如：var a = new Date("10/1/2020 10:29:16");
getDate()方法
	- 获取封装Date对象中日期的天数(1~30)
getDay()方法
	- 获取封装Date对象中日期是周几(0~6)   //0表示周日，6表示周六
getMonth()方法
	- 获取封装Date对象中日期的月份(0~11)  //0表示1月，1表示2月......
getFullYear()方法
	- 获取封装Date对象中日期的四位数年份
getTime()方法
	- 获取当前日期的时间戳
	- 时间戳，指格林威治时间1970年1月1日，0时0分0秒，到封装Date对象中日期的时间(单位：毫秒)
	- 计算机在底层保存我们时间时都是保存的时间戳
Date.now()方法
	- 获取当前的时间戳

P82. Math对象
- Math和其他的对象不同，它不是一个构造函数
	它属于一个工具类不用创建对象，它里面封装了数学运算相关的属性和方法，我们直接调用就好
		比如：Math.PI的结果是圆周率，更多常量属性可以看附件"Date对象的方法.jpg"
	- Math.ceil()
		可以对一个数向上舍入
	- Math.floor()
		可以对一个数向下舍入
	- Math.round()
		可以对一个数四舍五入取整
	- 生成随机数
		利用Math.random()
			# 此方法生成的是0-1之间的随机数
				所以我们要是想利用这个实现0-10之间的随机数，可以将原来的值*10，再配合round使用
			# 生成一个x-y之间的随机数
				Math.round(Math.random()*(y-x)+x);
				以上面的0-10之间的数为例
				Math.round(Math.random()*(10-0)+0);	//此次仅举例，0可以不写
	- Math.max 和 Math.min
		生成最大值和最小值，如果传入数组，需要在数组前面加上...才能比较，如：
		var num = Math.max(...[10,20,15,22],...[5,7,8,99]);

P83. 包装类
- 在JS中为我们提供了三个包装类，通过这三个包装类可以装基本数据类型的数据转换为对象
	1. String()
		- 转换字符串
	2. Number()
		- 转换数值
	3. Bollean()
		- 转换布尔值
	我们除了可以用他们做类型转换，还可以作为包装类，如：
		var a = new String("haha");
		//这时的a就是一个对象了，我们可以对他进行各种对象的操作，而a = "haha"，对他进行对象操作是无效的
			// 但是这种方法我们一般不用，因为用这个方法进行比较时，可能会出现一些意想不到的结果
	- 方法和属性能添加给对象，不能添加给基本数据类型 	
		当我们对基本数据类型调用属性和方法时
			浏览器会自动临时调用包装类将其转换为对象，之后又将其转换回基本数据类型

P84. String对象的方法
- 在底层，字符串是以数组的形式保存的
	如： var a = "hello";			//其实是["h","e","l".....]
	所以我们用length可以求它的长度，甚至可以向数组一样用下标索引
- charAt()
	获取指定位置的字符，类似于下标索引，如：arr.charAt(1);   //获取下标为1的字符
- charCodeAt()
	获取指定位置字符的unicode编码，使用方式和上面相同
- formCharCode()   //和上面两个不同，这个是只作用于String对象的
	从unicode编码中获取指定位置的字符，但是浏览器是十六进制的，而我们输入的默认是10进制的，所以我们可以在前面加上0x告诉编译器这是16进制的数
	如：var a = String.formCharCode(0x2682);	//获取16进制unicode编码2682的值
- concat()
	- 连接两个字符串，作用和+类似
- indexOf()
	- 返回指定字符第一次出现的位置
	- 如果没有找到指定内容则返回-1
	- 括号内可以放两个参数，第一个参数为查找内容，第二个参数可以指定从哪儿开始
- lastIndexOf()
	- 作用和indexOf()相同，只不过这是从右往前找
	- 也可以指定开始位置
- match()
	- 找到一个或多个正则表达式的匹配
- replace()
	- 替换与正则表达式匹配的子串
- slice()
	- 用于截取字符串
	- 用法和数组相同，详见数组
- substring()
	- 用法大致和slice相同，都是用来截取字符串
	- 只不过这个方法不能传入负值，如果传入负值自动调整为0
	- 并且它会自动调整大小，所以你即使左右大小不正确也会调整为左小右大来截取
- substr()
	- 也是用于截取字符串，和上面的有些小区别
	- 第一个参数为起始位置，第二个参数是截取字符串的长度
- split()
	- 用于拆分字符串，和python相同
	- 唯一和python不同的是，如果传入一个空串，会将字符逐字拆分
- toUpperCase()
	- 将一个字符串转换成大写
- toLowerCase()
	- 将一个字符串转换成小写
	



































