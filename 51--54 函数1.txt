P51. 函数的简介
函数 function：
    - 函数也是一个对象
    - 函数中可以封装一些功能（代码），在需要时可以执行这些功能
    - 函数中可以保存一些代码，在需要的时候调用，相当于一个容器
    - 使用typeof()检查函数对象时，会返回function

创建函数：
    - 构造函数创建
        var fun = new Function();
        //括号内可填需要封装的代码，如：var fun = new Function("console.log('hello world')");
        封装的函数不会立即执行，只会在函数调用的时候执行，调用函数：函数对象();
        当调用函数的时候，函数中封装的代码会按照顺序执行
函数比其他对象都要更为强大，如：fun.name = "张飞";  这样是可以的，只不过和其他对象不同的是，函数还可以封装代码
    - 函数声明创建
        function 函数名([形参1、形参2...]){
            语句...
        }
        这个和上面的是一样的，甚至更为方便，实际操作中一般使用这种方法创建函数
    - 函数表达式创建
        var 变量名 = function(){
            语句...
        }
        这种创建的是一个匿名函数，和上面的区别就是没有函数名，但是没有函数名意味着我们无法调用这个函数
            所以我们需要给他赋值到一个变量中，通过调用变量来执行后面的函数代码，和第二种方法某种程度来说差不多

P52. 形参与实参
- 可以在函数的'()'中指定一个或多个形参(形式参数)
    多个形式参数之间用','隔开，声明形参就相当于在函数中声明了对应的变量，如：
    function sum(a,b){
        console.log(a+b);
    }
- 再调用函数的时候可以在()中指定实参(实际参数)，实参将会赋值给前面的形参，如：
    sum(1,2);
    //调用函数时解析器不会检查函数的类型，你输入number也可以，string也可以，可以任意的类型
        所以要注意，是否又可能会接受到非法的参数，如果有可能需要对函数的类型进行检查
    //调用函数时也不会检查函数实参的数量，和python不同，多余的实参不会被赋值
        如果实参的数量少于形参，那么未被赋值的形参将会时undefined
- 我们可以和Python一样在函数字面量创建的时候就给它先赋值一个默认值，那么在为传入实参的时候，形参仍然会被赋值，如：function sum(a=10,b=20){};

P53. 函数返回值
- 可以使用return来设置函数的返回值
    语法：
        return 值/变量;
    return后面的值会作为函数的结果返回，我们可以定义一个变量来接受该结果
    实例：
    function sum(a,b){
        return a+b;
    }
    result = sum(1,2);      //函数的执行结果是什么，result就是什么
    console.log(result);    //这样使我们的程序更加的灵活，返回的结果我们想干什么就干什么
- return语句执行后，后面的代码都不会执行
- 如果return后面不写任何值，则会返回undefined，如果不写return，也是返回undefined
- 返回值可以是任意的数据类型，包括函数、对象

P54. 实参的值
- 实参可以是任何值，再形参数量过多的时候，我们可以将实参定义成一个对象
	甚至，如果有必要的时候我们可以把一个函数传入到一个函数中，语法如：函数名1(函数名2);	//这里的函数名2不需要带括号，此时调用函数1的形参和调用函数2的内容是一样的
- 但是我们需要注意实参传入的是函数的时候，函数名和函数名()是不一样的
	假设我们有一个函数名fun：
		fun()
			- 调用函数
				相当于使用了这个函数的返回值
		fun
			- 函数对象
				相当于直接使用函数对象














