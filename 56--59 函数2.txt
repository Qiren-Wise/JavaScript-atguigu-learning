P56. 立即执行函数
立即执行函数即函数定义完之后，立即被调用，立即执行函数往往只会执行一次
如：
	(function(){		//这是一个匿名函数，如果不加最外面的括号，那么花括号内的代码会被视为代码块，而前面的function则不会被识别到，所以我们在最外面要加一个括号代表它们是一个整体
		alert("这是立即执行函数");
	})();		//立即执行函数中后面的括号是必不可少的，这个括号可以和普通函数的括号一样理解
实例：
	(function(a,b){
		console.log("a = " + a);
		console.log("b = " + b):
	}(123,456);		//这样也可以把123、456传入到a、b当中
	
P57. 方法
对象中的属性值也可以是一个函数
如：
	var obj = {name:"孙悟空",age:18};
	obj.fun=function(){
		console.log(obj.name)
	};
	obj.fun();		//此时调用对象的fun属性就相当于调用了那个函数，这里会打印"孙悟空"
- 函数作为对象的属性：
	如果我们的函数作为对象的属性保存，那么我们成这个函数是这个对象的方法，调用函数就是调用对象的方法(method)
		但是它们只是名称上的区别，其他没有区别
- 枚举对象中的属性：
	使用for ... in语句
	语法：
		for(var 变量 in 对象){
			语句....
		}
	//for...in语句中的对象有几个属性，循环体就会执行几次
		每次执行时，会将对象中的一个属性名赋值给对象
	实例：
		var obj ={
				name:"孙悟空",
				age:15,
				house:"花果山"
			}
			for(var i in obj){
				console.log(i + ":" + obj[i]);	//这里的变量i就是obj中每个属性的属性名，但是我们要获取对象中的属性值，不能使用：对象.属性名的方法，因为这种方法获取的属性名不能是变量
			}													所以，我们可以使用'[变量]'来获取对象中的属性值

P58. 全局作用域
作用域
	- 作用域指一个函数作用的范围
	- 在Js中有两种作用域
			1. 全局作用域
				- 直接编写在script标签中的JS代码，都在全局作用域	
				- 全局作用域在页面打开时创建，在页面关闭时销毁
				- 全局作用域都有一个对象window，它代表我们浏览器的窗口，它由浏览器创建我们可以直接使用
					# 在全局作用域中创建的变量都会作为window对象的属性保存
						如：var a=10; 		//console.log(a); 和 console.log(window.a);输出的结果一模一样
						但是如果我们访问一个不存在的变量，如：console.log(c); 		//此时会报错，我们可以用对象的方法来访问它
																					console.log(window.c);		//此时只会返回一个undefined，个别时候可能有需要可以使用此方法
					# 在全局作用域中创建的函数都会作为window对象的方法保存
				- 全局作用域中的变量都是全局变量
					可以在程序的任意部分访问
声明提前
	- 变量的声明提前
		- 使用var关键字创建的函数，会在所有代码执行前被声明(但是不会赋值)，
			如：
				console.log(a);		//这样不会出错，只不过a的值是undefined
				var a = 10;
			但是不使用var关键字定义的函数，则不会
			如：
				console.log(a);		//这就会出错，没有用var赋值的值不会提前声明，所以建议都是使用var函数声明
				a = 10;		//当然，如果这个a=10放在前面，程序也是可以正常运行的
	- 函数的声明提前
		- 使用函数声明形式创建的函数function 函数名(){}
			会被提前声明，所以你可以在程序的任何位置调用函数，即使在函数声明前面
		- 但是使用函数表达式创建的函数，则不会声明提前，所以不能在声明前调用
				
P59. 函数作用域
函数作用域：
	- 函数调用时创建，结束时销毁
	- 每调用一次函数，就会创建一个新的函数作用域，它们之间是互相独立的
	- 可以访问到全局变量，但是全局作用域无法访问局部变量
	- 函数作用域操作变量时，先会在自身作用域中查找，查找不到会向上一级作用域查找，直到查找到全局作用域
		所以当函数作用域和全局作用域变量名冲突时，函数作用域内的代码会优先调用自身的变量
			//如果想在函数作用域中访问全局作用域中一个和自身作用域中变量同名的变量时，可以使用window.变量
声明提前
	- 函数作用域中也有声明提前，使用'var'声明的变量会在函数中所有代码执行前声明
	- 函数作用域中函数声明提前与全局作用域同理
	注意：
		例1
			var num = 10;
			function a(){
				console.log(num);		//这里如果输出num会显示undefined噢~因为下面用'var'定义了num，num会在函数中代码执行前先声明成undefined
				var num = 20;
			}
		例2
			var num = 10;
			function a(){
				num = 20;
			}
			a();
			console.log(num);	//这里的num会是20噢~因为函数作用域中的num没有用var声明，所以相当于window.num=20，也就是改变了全局变量
		例3
			var e = 10;
			function a(e){
				console.log(e);		//这里的e会显示undefined噢~因为定义了形参就相当于在函数作用域中定义了一个变量，而此时下面调用函数没有传入变量，所以访问的不是全局变量的值
			}
			a();	
	

						



























	