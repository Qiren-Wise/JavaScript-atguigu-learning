P85. 初识正则表达式
正则表达式用于定义一些字符串的规则
	- 计算机可以根据正则表达式，来检查一个字符是否符合规则
		获取字符串中符合规则的内容提取出来
	- 语法
		var 变量 = new RegExp("正则表达式","匹配模式");
		"正则表达式"表示你要匹配的字符
		"匹配模式"有两种：
			i	忽略大小写
			g	全局匹配模式
	- 正则表达式的方法
		test()
		这个方法可以检测一个字符串是否符合正则表达式的规则，如果符合返回true，反之false
		如：
			var a = new RegExp("a","i");
			var t = "a";
			console.log(a.test(t));		//测试t中是否有a，只要有a就返回true，并且上面有i，所有这是忽略大小写模式
			
P86. 正则语法
- 除了上面那种使用构造函数的方式创建正则表达式，我们还可以使用字面量来创建正则表达式
	语法如：var a = /正则表达式/匹配模式
- 两种方法的优缺点
	字面量：创建简单
	构造函数：使用灵活
- 如果我们想创建一个字符串包含或的关系时，我如检查一个字符串是否有a或b，们可以用"|"来表示
	如：var a = /a|b/i;
- 我们除了用"|"还可以用[]来表示或的关系，如：var a = /[ab]/i;
	但是我们发现还是有些麻烦，所以我们可以用"-"表示某段距离的数字，如：[a-z] -> a到z 、[A-Z] -> A到Z 、[0-9] -> 0到9、[A-z]表示大小写字母
- 但是我们可能有时候有更高的需求，如检查一个字符串里有没有abc或adc或aec，这时候我们可以这样做
	如：var a = /a[bde]c/;		# 中间那里可以表示bde三个任意字符
- 我们有时候可能还想要表达除了某些数字外的规则，我们可以用"[^内容]"来表示，如：var a = [^0-9];   //即表示除了0-9的数字都可以


P87. 字符串和正则表达式相关的语法
- split()
	前面讲过split方法，但是还是不够灵活，我们会发现，因为括号里传的只是一个字符串，我们其实可以用正则表达式让它更加灵活
	这个方法即使不全局匹配，也会全局查找
	如：var a = "1a2b3c4d5f6g7";
			var result = a.split(/[a-z]/);		//这时候我们输出result的时候就会发现以及把a的所有字母都拆分掉了
- search()
	传入字符串的时候和indexOf方法相同，唯一的区别是它可以用正则表达式来查找
	如：	//我们需要查找一个字符串，里面有abc 或 adc 或 aec的位置
		var a = "hello abc hello adc aec";
        var result = a.search(/a[e-f]c/);		//这时候result的结果就是abc的位置索引
- match()
	可以根据正则表达式，从一个字符串中将符合条件的内容提取出来
	 默认情况下match只会找到第一个符合内容的字符串出来，找到以后就停止检索
		我们可以使用正则的全局匹配模式来匹配所有内容，甚至我们可以设置多个匹配模式！
	并且最终的结果会以数组的形式返回
	如：var arr = "1a2b3c4d5f6g7A8";
        var result = arr.match(/[a-z]/gi);		//这里result是包含arr内所有字母的数组
- replace()
	可以将字符串的指定内容替换成新内容
	参数：
		1. 需要被替换的字符
		2. 替换成的新字符
	如果我们第一个参数用字符串来表示默认只会替换符合要求的第一个字符，所有第一个参数可以换成正则表达式，然后开全局匹配模式
	如：var a = "1a2b3c4d5f6g7e8";
        var result = a.replace(/[a-z]/g,"-");	//这样就把a字符串中的全部字母改成了-

P88. 正则表达式语法
创建一个正则表达式检查一个字符串是否含有aaa，这个时候还好检测，用/aaa/即可，可是如果我们检查3000个a呢？
	- 这时候就需要量词
		# 我们可以通过量词来设置一个内容出现的次数，如：var a = /a{3000}/;	检查一个a是否出现了3000次
		# 但是量词只对它前面的一个内容有效，比如我们想检测ab是否出现了三次，需要用括号把他们括起来，如：var a = /(ab){3}/;
		# {m,n}   //正好出现m到n次
		# {m,}   //出现m次以上
		# n+    //检查n这个字符串是否出现一次以上，相当于{1,}
		# n*     //检查n这个字符串是否出现0次或多次，相当于{0,}，可以当作一个占位符或通配符使用
		# n?    //检查n这个字符串是否出现0次或1次，想当于{0,1}
		# ^n   //检查一个字符串是否以n开头
		# n$   //检查一个字符串是否以n结尾
		# ^n$	//这不是检查一个字符串是否以n开头以n结尾！！这时表示这个字符串是否等于n
	- 检查一个字符串是否含有"."
		这时我们不能直接用"/./"来表示规则，
			# 因为"."在正则中表示任意字符
			# 我们要是需要单纯的表示一个"."的话，需要用转义字符"\"，
			# "\."表示"."
			# "\\"表示"\"
			
		注意：使用构造函数创建正则时，由于它的参数传入的时字符串，而\是字符串中的转义字符，如果要单纯使用\也要用\\表示
	- 特殊字符
		\w	表示任意字母、数字和下划线
		\W	表示除了任意字母、数字和下划线
		\d		表示任意数字
		\D	表示除了任意数字
		\s		表示空格
		\S		表示除了空格
		\b		表示单词边界
		\B		表示除了单词边界
		
	小练习：去除字符串开头与结尾的空格
		var user = prompt("请输入用户名：");
        var reg = /^\s*|\s*$/g;		
        user = user.replace(reg,"");
        document.write(user);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
