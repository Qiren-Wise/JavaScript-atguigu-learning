P70. 数组简介
对象一般来说有三种：
	- 内建对象
	- 数组对象
	- 自定义对象

	- 我们前面学的都是自定义对象，我们实际开发中，前两个对象也是非常重要的，这节课讲内建对象--数组对象
	数组：
		- 数组也是一个对象
		- 普通对象使用字符串作为属性名，数组使用数字来作为索引操作元素
		- 索引就是从0开始的整数
		- 数组的存储性能比普通对象要好
	- 创建数组对象：
		var arr = new Array();		//这里的Array是数组的意思，前面的arr是变量名，用于存放数组
	- 添加元素：	数组[索引] = 值
		arr[0] = 10;   arr[1] = 20;
	- 读取元素：	数组[索引]
		console.log(arr[0]);
		如果读取不存在的值，比如arr[3]，不会报错，只是会返回undefined
	- 获取数组长度：
		使用length属性，如：console.log(arr.length);		//这个返回值是数组长度
		而且length也可以求字符串长度哟~
		# 对于连续的数组，可以用length获取数组的长度
			# 但是对于非连续的数组，length会返回最大索引值+1
		- 同时，我们创建非连续数组时，直接输入数组会发现结果会类似于: 1,2,,,,,,,10,,,,,,20  //这种只占用位置而没用值
			所以我们尽量创建连续的数组
		- 我们还可以修改length属性
			如果修改后的长度大于原长度：则多余的部分空出来
			如果修改后的长度小于原长度：则多出的元素会被删除
	- 向数组的最后一个位置添加元素
		语法：数组[数组名.length] = 元素;
		如：arr[arr.length] = 20;
		
		
P71. 数组字面量
- 除了上面的那种方法创建数组，我们还可以用'[]'来创建数组，如：var arr = [];
	我们还可以在创建时就在里面添加元素，如：var arr = [1,2,3,4,5];
		当然，使用构造函数的时候也可以在()里添加元素，不过现在这个更方便
	- 但是当数组元素只创建一个的时候就有区别了，Array(10)代表创建一个长度为10的数组，var arr = [10];  代表数组第一个元素为10
	- 数组中可以放任何值，包括对象、数组，如果数组里面嵌套一个数组就叫做二维数组


P72. 数组的四种方法
1. push()
	- 可以向数组中添加1个或多个元素，如：arr.push(5,6,7,8);
	- push的返回值是添加后数组的总长度
2. pop()
	- 删除数组中最后一个元素
	- 返回值的删除的那个元素
3. unshift()
	- 向数组开头添加1个或多个元素，和push相反
	- 返回的是新数组的长度
4. shift()
	- 删除数组开头的一个元素
	- 返回值的删除的那个元素
	

P74. forEach
- 一般我们都是用for循环来遍历数组，其实我们还可以使用forEach来遍历数组
- forEach如果执行再IE浏览器中，必须要IE8以上的版本		
	forEach()方法需要一个函数作为参数
		- 像这种函数，由我们创建，但不由我们调用，我们称为回调函数
		- 数组中有几个元素就调用几次，每次执行时，浏览器会将遍历到的元素以实参的形式传递进来，我们可以定义形参来接受这些内容
		- 浏览器在回调函数中传递三个参数：
			第一个参数 -- 正在遍历的元素
			第二个参数 -- 当前遍历元素的索引
			第三个参数 -- 当前遍历的数组
		举例：
			var arr = ["孙悟空","张飞","吕布","唐僧"];
			arr.forEach(function(value,index,obj){	//arr由几个元素就执行几次循环
				console.log(obj);
			})
			
			
P76. slice和splice
- slice	//和Python的列表切片方法类似
	# 可以用来从数组中提取元素
	# 该方法不会改变原数字
	# 参数：
		1. 截取开始位置的索引(start)，包含开始索引
		2. 截取结束位置的索引(end)，不含结束索引
			- 第二个参数可以不写，不写默认从开始索引处到末尾
	# 索引可以传递负值，如果传递一个负值，则从后往前计算，-1倒数第一个、-2倒数第二个....

- splice
	- 可以用于删除数组中指定数量的元素
	- 使用slice()会影响到原数组，将指定元素从原数组中删除，并将删除元素返回，类似pop()
	- 参数：
		1. 表示开始位置的索引
		2. 表示从开始位置需要删除的数量
		3. 可以传递一些新的元素，这些元素将会自动插入原数组的开始索引之后
	- 举例：
		var arr = ["张飞","关羽","刘备","赵云"];
        var result = arr.splice(1,1,"黄忠","马超");	//在arr数组索引为1的位置，先删除"关羽"项，然后在此位置插入"黄忠","马超"项
        console.log(arr);		//结果为：["张飞","黄忠","马超","刘备","赵云"]
        console.log(result);	//结果为：["关羽"]
		
		var result = arr.splice(1,0,"黄忠","马超");	//如果第二个参数为0，那么就只添加元素，会在索引为1的位置前面假设第三个参数中的元素


P78. 数组的其他方法
concat()方法
	- 可以连接两个或多个数组，并将新的数组返回
	- 不会直接影响原数组
	- 例如：var result = arr.concat(arr2,arr3,"牛魔王","猪八戒");		//这会把arr2和arr3的元素，以及"牛魔王""猪八戒"合并到arr中，并传回result，但是不会影响原数组
join()方法
	- 该方法可以把数组的所有元素转换为字符串
	- 不会直接影响原数组
	- 括号填数组中元素与元素的间隔符，如果为空默认为','
reverse()方法
	- 翻转数组中的值
	- 会影响原数组	
sort()方法
	- 可以对数组进行排序
	- 会影响原数组，默认安装Unicode编码排序
		但是对于纯数字的数字用sort()进行排序的时候，由于按照Unicode编码进行排序，可能会出现错误
	- 我们可以自定义纯数字数组的排序规则，我们可以在sort()括号中添加一个回调函数，来指定排序规则
		回调函数需要两个形参，浏览器会把数组中的元素作为实参去调用回调函数
			这两个参数，a肯定在b前面
		- 浏览器会根据函数的返回值来决定顺序
			返回一个数大于0则交换位置
			返回一个数小于0则位置不变
			返回一个数等于0代表两个值相等，不交换位置
	- 我们我们要升序排列一个数组可以返回a-b，降序可以b-a
	- 举例：	
		var arr = [5,8,7,9,6,3,2,4,1,0];  
        var result = arr.sort(function(a,b){ return b-a; });
        console.log(result);



			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			