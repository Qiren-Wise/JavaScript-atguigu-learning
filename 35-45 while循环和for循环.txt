P35. while循环
循环语句：
    通过循环语句可以反复的执行一段代码多次
- while循环
    语法：
        while(条件表达式){
            语句...
        }
- 执行流程：while语句在执行时，先对条件表达式进行求值判断
                如果结果为true，则执行循环体
                    执行完毕后，继续对条件表达式进行判断
                        如果还是为true，接着执行循环体，依次类推，直到条件表达式为false
- 如果条件表达式的值永远为true，程序将会进入死循环，死循环在开发中要慎用
    我们可以在语句中加入break来终止循环
- 创建一个循环，往往需要三个步骤：
    1. 创建一个初始化变量
    2. 在循环中设置条件表达式
    3. 定义一个更新表达式的语句，每次更新初始化变量
    如：    var a=0; //1
            while(a<10){ //2
                alert(a);
                i++;  //3
            }

- do...while循环
    语法：
        do{
            语句
        }while(条件表达式)
- 执行流程：do...while语句执行时，会先执行循环体
                循环体执行完毕以后，再对while后的条件进行判断
                    如果结果为true，则继续执行循环，执行完毕继续判断，依次类推，直到条件表达式为false
- 实际上，这两个语句功能类型，只不过while时先判断再执行，do...while是先执行后判断
    do...while可以保证循环体至少循环依次，而while不能，这里我们按需选择就好

P37. for循环(一)
for语句，也是一个循环语句，也称为for循环
    - 在for循环中，为我们提供了专门的位置来放三个表达式：
        1.初始化表达式
        2.条件表达式
        3.更新表达式
    - for循环语法:
        for(初始化表达式;条件表达式;更新表达式){
            语句...
        }
    - 如：for(var a=0; a<10; a++){
        alert(a);       //这样将会在浏览器弹出10次有a的值的框
    }   //将while的三个条件都放到了句首
    - 执行流程：
        I 执行初始化表达式（初始化表达式只执行1次）
        II 执行条件表达式
        III 如果条件表达式为true，则执行循环语句，false，则终止循环
        IV 执行更新表达式，更新完毕重复执行II
        # for循环中的三个部分可以省略，也可以写在外部，如：for(;a<10;){alert(a++)}
            如果for循环的三个部分全部都不写，此时循环会成为一个死循环
        P38练习见

P44. break、continue和查询程序运行时间
break关键字可以用来退出循环语句和switch语句
    - 不能用于if语句，不然会报错
    - break语句会立即停止离他最近的循环语句
        # 如果不是想结束离他最近的一个循环，而是结束外部循环，可以给循环语句创建一个lable，来标识循环，如：
            outer:
            for(var a=1; a<5; a++){
                console.log("外层循环");
                for(var b=1; b<5; b++){
                    break outer;    //在break后面填入定义的lable标识名就可以结束外部循环啦！
                    console.log("内层循环");
                }
            }

continue关键字可以用来跳过当次循环，如：
    for(var a=1; a<5; a++){
        if(a==2){
            continue;   # 这里执行continue后面循环的内容将不会在执行，直接跳到a++执行
        }   
        console.log(a);
    }
    - ，continue只能用于循环语句
    - 同样continue也是只对离它最近的循环起作用，同样可以用lable标签来跳过外部当次循环
差异：continue是跳过当次循环，break是全部循环

计时器：
如果想知道程序执行的时长，可以在程序开始的位置加上：console.time("变量")，在程序最后加上：console.timeEnd("变量")

P45. 开平方根
我们可以用Math.sqrt(变量)来对变量中的数字进行开平方根运算
                



