P27. 代码块
我们的程序是由一条一条语句构成的
    - 语句是自上而下执行的
    - 在JS中我们可以通过'{}'来进行分组
        # 同一个'{}'中的语句，要么都执行，要么都不执行
        # 一个'{}'中的语句，我们也称为代码块
        # 在代码块的后边，不需要加';'
    - JS中的代码块，只具有分组的作用，不具有其他任何作用
        # 代码块内部的内容，在外部是完全可见的
在后面'条件流程控制语句'中还会细讲

P28. if语句(一)
流程控制语句
    - 通过流程控制语句，可以使我们的程序根据一定的条件来选择执行
    - 语句的分类：
        1. 条件判断语句
        2.条件分支语句
        3.循环语句

1. 条件判断语句
    - 使用条件判断语句可以在执行某个程序之前进行判断，条件成立则执行，反之不执行。
    - if语句：
        语法一：
            if(条件表达式)     //如果条件表达式为false则不会执行后面的语句
                语句1(true)     
                语句2          //if语句只能控制紧随其后的语句，这里的语句2不管ture与否，都会执行
        # 如果希望if语句可以控制多条语句，可以统一放到代码块中，即在语句1和2两侧加上'{}'
        # if语句后的代码块不是必须的，但是在开发中，最好统一加上'{}'，不管是不是只有一条语句，这样可以使结构更加清楚
        例：
            if(条件表达式){
                语句1...
            }
        # if旁的条件表达式别忘了加括号哦！
P29. if语句(二)
    - if...else...语句
        语法二：    
            if(条件表达式){
                语句1...
            } 
            else{
                语句2...
            }      
        //条件表达式执行时，先对if语句后的进行求值判断，如果该值为true，则执行if后的语句，为false，则执行else后的语句
    - if...else if...else...语句
        语法三：
            if(条件表达式){
                语句1...
            }
            else if(条件表达式){
                语句2...
            }
            else{
                语句3...
            }
            //这是自上而下进行判断的，如果if后面的条件表达式为false，则执行下一个else后面的if语句，如果还不成立，就执行else语句的内容
            //如果else的内容为空，且前面if语句的执行结果都是false，则什么都不会返回
            //这和别的语言不一样，不能写成else if 不能写成elif噢！
prompt()方法
    - 可以弹出一个提示框，这个提示框中带有一个文本框，可以提供输入
    - 括号内可以填一个字符串，该提示框将会以该字符串作为文本提示。如：pormpt("请输入成绩：");
    - 用户输入的文本将会作为函数的返回值返回，可以定义一个变量来接受该内容
    
P34. 条件分支语句(switch语句)      
条件分支语句也叫switch语句
    - 语法：
        switch(条件表达式){
            case 表达式:
                语句...
                break;
            case 表达式:
                语句...
                break;
            default:
                语句...
                break;
        } 
    - 执行流程
        switch...case...语句
        # 在执行时会从上到下依次将case后面的值和switch后面条件表达式的值进行全等比较(注意这里时全等比较哦)    
            如果比较结果为true，则从当前case处开始执行代码
                当前case后面的代码都会执行，不只当前case的值，后面case的值一样会执行，只不过前面case的值不执行
                不想遇到这种情况我们可以用break来退出switch语句，所有一般情况下我们每条case语句结束时都要加上break
            如果比较结果为false，则继续向下比较   
        # 如果前面所有比较结果都为false，则执行default后面的语句(类似与else)
    - switch语句和if语句的功能实际上是有所重复的，使用switch可以实现if语句的功能，反之也可以，
      所以我们使用时，可以根据我们的习惯进行选择