P46. 初识对象
Js中数据类型：
    - string 字符串
    - number 数值
    - boolean 布尔
    - null 空值
    - undefined 未定义
        //以上五种类型皆是基本数据练习，以后我们看到的值，只要不是上边五种，都是对象
        //基本数据类型都是单一的值，如"hello"、True、123。值和值之间没有任何练习
    - object 对象
        //对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性
        1.内建对象
            - 有ES标准中定义的对象，在任何ES实现中都可以使用
            - 比如：Math、String、Function....
        2.宿主对象
            - 有Js运行环境提供的对象，目前来讲主要指浏览器提供的对象
            - 比如BOM、DOM... 常用的有console、document
        3.自定义对象
            - 有开发人员自行创建

P47. 对象的基本操作
创建对象：
var obj = new Object();
    - 使用new关键字调用的函数，是构造函数constructor，构造函数是专门用来创建对象的函数
    - 在对象中保存的值称为属性，向对象添加属性的语法如下：对象.属性名 = 属性值; 如：obj.name = "孙悟空";
    - 读取对象中的属性，语法如下：对象.属性名; 如：console.log(obj.name); 控制台输出name属性名下的值
        # 如果读取对象中没有的值，不会报错而会返会Undefined
    - 修改对象的属性值，语法如下：对象.属性值 = 新值; 如：obj.name = "唐僧";
    - 删除对象属性，语法如下：delete 对象.属性名; 如：delete obj.name;

P48. 属性名和属性值
属性名：
    - 对象的属性名不强制要求遵守标识符规范，如：obj.var = "张三"; 是可以的
        # 对象什么乱七八糟的名字都可以用，但是我们还是尽量使用标识符规范去做
        # 虽然说什么乱七八糟的名字都可以，但是如果你是数值这种特殊的属性名，我们可以用另一种方式：
            语法：对象[属性名] = 属性值; 如：obj[123] = 456; 这样就定义了一个123的属性名，值为456
            不过要记得，怎么添加的，也要怎么读取哟~
    - 使用[]这种方式添加变量会更加的灵活
        # 我们可以在[]中填入另一个变量，这样和该变量值相同的属性名就会读取对于的属性，如：console.log(obj[n]);
        # 相反使用'.'的方法读取属性名就写死了

属性值：
    - 属性值可以是任意类型的值，甚至可以是个对象
    对象嵌套：
        var obj = new Object();     //注意这里的Object要大写的O
        var obj2 = new Object();
        //创建对象
        obj["罗翔"] = "说张三";    //对第一个对象赋值
        obj["text"] = obj2;     //将第二个对象的属性赋值给第一个对象的text属性名中
        obj2["name"] = "猪八戒";    // 第二个对象赋值
        obj2["喜羊羊"] = "灰太狼";
        //读取
        console.log(obj["text"]);   //读取对象中的对象
        console.log(obj["text"]["喜羊羊"]);  //读取第二个对象中喜羊羊这个属性名的属性值
    - 'in'操作符：
        # 我们可以知道对象中有没有指定的属性
        # 如console.log("name" in obj);

P49. 基本数据类型和引用数据类型
基本数据类型：
    String  Number  Float  Null  undefined
    这些数据都是储存在栈内存里的
引用数据类型：
    Object  这个存储在堆内存中
    当比较两个基本数据类型的值时，就是比较值
    而比较两个引用数据类型时，它们比较的对象是地址
        即使两个对象完全一样，但是地址不同，也会返回false

   栈内存    //当我们定义一个变量，如:var num = 123; var num2 = num; //同时定义一个num2等于num，这时我们变量的值会拷贝num的值
变量     值
num     123     //当我们对num进行操作，如:num++; num的值会变成124，而num2不受到任何影响
num2    123
...     // 这时，我们的num和num2是独立的，它们之间互不影响
obj     1a2b    //这里的值是对应内存中的地址(对象的引用),这里写的1a2b是一个比喻
obj2    1a2b    //和obj相同地址
...
obj3    1a2b    //输入：console.log(obj3 == obj4); 会返回false
obj4    1a3b

============================================================================================================================== 

    堆内存      //当我们定义一个对象的时候,如:var obj = new Object(); 会在栈内存中存储对象名      
|            |
|    1a2b    |  //然后再对内存开辟一个新的空间,栈内存的值指向的就是这个地址
|    1a3b    |  //如果我们定义一个新shi的对象:var obj2 = obj; 这时,我们对象拷贝的是栈内存中的地址
|            |      所以如果obj的属性改变了,obj2的属性也会改变,它们指向的是同一个堆内存中的地址
|            |          但是如果我们直接修改obj2的值的时候,如：obj2=null; 这时obj中的内容是不会收到影响的，它们之间的影响就断开了
//如果我们定义两个对象，如：var obj3 = new Object();var obj4 = new Object();
    然后对它们赋予相同的属性名，obj3.name = "李白"; obj4.name = "李白";
        这时，它们是不会相等的，因为在栈内存中，它们的地址不同，所以不管再相似，它们两个对象也不会相等

P50. 对象字面量
前面所教的创建对象的方法都是：var obj = new Object();
其实还可以使用对象字面量创建：var obj = {};     //这两种方法创建的结果是相同的
    - 同时，我们还可以在'{}'内直接指定对象的属性
        语法：var obj = {属性名:属性值,属性名:属性值....};  如:var obj = {name:"孙悟空"};   //和python字典类似
        对象字面量的属性名可以加引号，也可以不加，即'{name:"abc"}'和'{"name":"abc"}'效果相同，建议不加
            不过如果属性名特殊，如"@%#%^%%&^&"，则必须加双引号
    - 属性名和属性值是一组一组的名值对结构，
        名和值之间用':'连接，多个名值对之间用','隔开
            如果一个属性是对象中最后一个属性，则名值对后面就不应该再加','
