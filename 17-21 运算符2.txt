P17. 自增和自减
自增 '++'
    - 通过自增可以是变量在自身的基础上增加1，如a++
    - 对于一个变量自增以后，原变量的值会立即自增1
    - 自增分为两种：前++(++a)  和  后++(a++)
        # 无论是a++还是++a，结果都是没区别的，都会使原变量自增1
        不同点：
            # a++的值等于原变量的值（自增前的值）如果console.log(a++)是会显示原变量的
            # ++a的值等于原变量的新值(自增后的值)，这里如果console.log(a++)是会显示新值的
            # 可以简单认为a++是先用再算，而++a是先算再用
            # 如过用a++赋值，如 b = a++，注意这里是等于a的原值，而不是自增之后的新值！
自减 '--'
    - 通过自减可以使变量在自身的基础上减一
    - 自减和自增一样都是有两种方式：前--(--a) 和 后--(a--)
    - 和自增同理

P18. 自增练习
看课程解析即可。

P19. 逻辑运算符
Js中为我们提供了三种逻辑运算符
    - '!'  非
        # '!'号可以对一个值进行非运算
        # 所谓非运算就是对一个布尔值进行取反操作
        # 如果对非布尔值进行运算，则会将其先转换为布尔值，再进行取反
            我们可以利用该特点，将一个数据类型转为布尔值
            可以将任意函数进行两次取反，来将其转换为Boolean，原理和Boolean()一样
    - '&&' 与
        # 可以对符号两侧的内容进行与运算
            如果两个值都是true则返回true
            只要有一个false就返回false
        # JS中的‘与’属于短路的与，如果第一个值已经时false，则不会看第二个值，后面的内容也不会执行 
    - '||' 或
        # '||'可以对两侧的值进行或运算
        # 两个都是false，则返回false
        # 只要有一个true，就返回true
        # JS的‘或’属于短路的或，如果第一个值为true，则不会检查第二个

P20. 非布尔值的与或运算
'&&' '||' 非布尔值的情况
    - 对非布尔值值进行与或运算时，会先将其转换为布尔值，再进行运算，并且返回原值
        # 与运算：
            如果两个值都为True，则返回后边的值
            如果两个值有false，则返回前面的false
        # 或运算：
            如果第一个值为true，则直接返回第一个值
            如果第一个值false，则直接返回第二个值

P21. 赋值运算符
'=' 可以将符号右边的值赋值给符号左边的值
'+=' 等价于a=a+5    (和python同理)
'-='、'*='、'/='、'%=' 与上同理

